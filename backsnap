#!/bin/env python3
# -*- mode: python; -*-

# DEFINE VARIABLES -----------------------------------------------------------
MANUAL="""
You must first configure the backup destination, in particular the excludes
file.   At the destination, there must exist a .backsnap directory and an
excludes file:

  <dest>/.backsnap/excludes  - list of directories and files to exclude,
                               one path per line.

Backsnap will create and manage other files in this directory you can
safely ignore (e.g. count, filelist).

Backups at the destination will be in directories named LEVELn/
where n is the level.  These level numbers do NOT represent time order,
but rather tower-of-hanoi depth.  To list the backups from oldest to
newest, pass the -t option to /bin/ls.

Do not run backsnap multiple times to back up multiple sources.  Rather
list all the sources to be backed up on the command line for one
invocation.  Otherwise it will increment the count, clear the destination
(possibly erasing an older backup), and backup the data at a different
backup level from the previous invocation.

Backsnap must be run as root, and it must have root access to <dest>
and <src>.  If this includes root access over the network via ssh,
then ssh must not be impinged with password prompts. This can be
achieved with ssh authorized_keys.  See ssh for details.

Features:

* Keeps multiple levels of backups using the tower-of-hanoi strategy.
* Uses rsync and the previous backup in such a way that it only copies
  data that has changed since the previous backup was taken.
* If a file hasn't changed, it is included in the new backup via a hardlink,
  so the data is not duplicated and yet the new backup directory contains
  all of the files (for this reason, keeping 8 levels of backup doesn't take
  8x of the original space, in practice it is closer to 2x)
* Supports both push and pull architectures
* Is portage-aware, optionally skipping system files which have not been
  altered from the package default (THIS FUNCTIONALITY IS INCOMPLETE)
* Backups are fully functional filesystems, so they are mountable (read-only
  please) and recovery is a cinch.  (You might think compressing them would
  save space, but it wouldn't because we'd lose the hardlink savings)
* Encrypted network transit using ssh
* Uses nice and ionice so your system doesn't bog down during operation
* Optionally uses network compression for slow (or expensive) networks

Examples:

  Example push usage from cron:
    59 15 * * *  root  /sbin/backsnap pluto:/backups/earth / /var

  Example pull usage from cron:
    45 2 * * 2   root  /sbin/backsnap /backups/earth earth:/ earth:/boot earth:/var

  Example read-only nfs mounting backups, backup server /etc/exports:
    /backups 192.168.1.0/24(ro,async,no_root_squash,no_subtree_check)

  Example read-only nfs mounting backups, client fstab:
    pluto:/backups/earth   /snapshots  nfs  proto=tcp,ro,noatime,soft,intr,nolock 0 0
"""

CREDITS="""by Michael Dilger <mike@mikedilger.com>
  nongentoo checking code originally from:
    Vincent Delft <vincent_delft@yahoo.com>
  rsync backup ideas taken from:
    http://www.mikerubel.org/computers/rsync_snapshots/
    http://www.sanitarium.net/golug/rsync_backups.html
  tower of hanoi strategy from:
    http://en.wikipedia.org/wiki/Backup_rotation_scheme
"""

AUTHOR="Michael Dilger"
VERSION="0.4.1"
LAST_MODIFICATION="24 March 2011"

# IMPORTS --------------------------------------------------------------------

import os
import sys
import string
import fnmatch
import signal

# EXIT HANDLER AND TRAP SIGNALS ----------------------------------------------

ONEXIT=[]
def myexitcode(*args,exitval=1):
  global ONEXIT
  for code in ONEXIT:
    exec(code)
  sys.exit(exitval)

signal.signal(signal.SIGSEGV,myexitcode)
signal.signal(signal.SIGINT,myexitcode)
signal.signal(signal.SIGABRT,myexitcode)
signal.signal(signal.SIGHUP,myexitcode)
signal.signal(signal.SIGQUIT,myexitcode)
signal.signal(signal.SIGTERM,myexitcode)

# e.g.
  #ONEXIT.append('''# remove temp dir
  ##/bin/rm -rf --one-file-system --preserve-root $TMPDIR   # but this is bash
  #'''
  #);

# PARSE COMMAND LINE ---------------------------------------------------------

def print_manual(option,opt,value,parser):
  global MANUAL
  parser.print_help()
  print(MANUAL)
  myexitcode()

def print_credits(option,opt,value,parser):
  global CREDITS
  print(CREDITS)
  myexitcode()

from optparse import OptionParser
parser = OptionParser(usage="usage: %prog [options] <dest> <src> [<src> ...]",
                      version="%prog {0}".format(VERSION),
                      description="Backsnap (backup snapshot) backs up "
                      "directories, manages multiple backup levels, works "
                      "over the network, and optionally skips system files.  "
                      "You must specify a <dest> path and "
                      "at least one <src> path.  "
                      "Either <dest> or <src> (but not both) may be a remote "
                      "path in the form <hostname>:<path>, in which case ssh "
                      "is used.   If <src> is in this form, all <src> "
                      "arguments must use the same hostname.")

parser.add_option("--manual",
                  action="callback", callback=print_manual,
                  help="Long help message (like a man page)")
parser.add_option("--dry-run",
                  action="store_true",
                  dest="dryrun",
                  default=False,
                  help="Just print what it would do, but don't actually do it")
parser.add_option("--slownet",
                  action="store_true",
                  dest="slownet",
                  default=False,
                  help="Use network compression [default: %default]")
parser.add_option("--rootdir",
                  action="store",
                  dest="rootdir",
                  default="/",
                  help="Root directory of the source [default: %default]")
# --skipsystem will use nongentoo, but not yet implemented
#parser.add_option("--skipsystem",
#                  action="store_true",
#                  dest="skipsystem",
#                  default=False,
#                  help="Skip all unmodified system files in the backup "
#                  "[default: %default]")
# --mtimeonly modifies skipsystem, not yet implemented
#parser.add_option("--mtimeonly",
#                  action="store_true",
#                  dest="mtimeonly",
#                  default=False,
#                  help="Compare system files based on mtime only (skip md5) "
#                  "[default: %default]")
parser.add_option("--depth",
                  action="store",
                  type="int",
                  dest="depth",
                  default=8,
                  help="Number of levels deep for tower of hanoi "
                  "[default: %default]")
parser.add_option("--credits",
                  action="callback", callback=print_credits,
                  help="Print credits")

(options, args) = parser.parse_args()

if len(args)<1:
  print("Error: You must specify a <dest> and at least one <src>")
  parser.print_help()
  myexitcode()

if len(args)<2:
  print("Error: You must specify at least one source path")
  parser.print_help()
  myexitcode()

dest=args[0]
srcs=args[1:]

print("  DEBUG {0} => {1}".format(srcs,dest))

# Verify that we are running as root -----------------------------------------

#if os.geteuid()!=0:
#  print("backsnap will only run as root.")
#  myexitcode()

# TEMP DIR -------------------------------------------------------------------

import tempfile
tempdir = tempfile.mkdtemp()

ONEXIT.append("""import shutil
print("Cleaning up {0}".format(globals()["tempdir"]))
shutil.rmtree(globals()["tempdir"])
"""
              );

# DETERMINE DIRECTION --------------------------------------------------------

# local: both are local
# push: remote destination
# pull: remote sources

import re
direction="local"
hostmatchprog = re.compile(r"^([^/]+):(.+)")
testdest = hostmatchprog.match(dest)
testsrc = hostmatchprog.match(srcs[0])
if testdest is not None:
  if testsrc is not None:
    print("Error: <dest> and <src> cannot both be remote")
    parser.print_help()
    myexitcode()
  else:                                    # PUSH:
    direction="push"
    desthost = testdest.groups()[0]
    destpath = testdest.groups()[1]
    srcspath = srcs
else:
  destpath=dest
  if testsrc is not None:                  # PULL:
    direction="pull"
    srcspath = []
    for s in srcs:
      ts = hostmatchprog.match(s)
      if ts.groups()[0] != testsrc.groups()[0]:
        print("Error: All remote <src> must be the same host")
        parser.print_help()
        myexitcode()
      srcspath.append(ts.groups()[1])
  else:                                    # LOCAL:
    srcspath = srcs
    direction="local"

print("  DEBUG: direction = {0}".format(direction))

# Setup reusable command arguments -------------------------------------------

ionice=['/usr/bin/ionice','-c','3']

iftesting=[]
if (options.dryrun):
  iftesting=['/bin/echo']

destrun=[]
destcp=['/bin/cp']
if direction=="push":
  destrun=['/usr/bin/ssh',desthost]
  destcp=['/usr/bin/scp']

rsync_perfopts=[]
if options.slownet and direction!='local':
  rsync_perfopts.append('-z')   # -z means compress
if direction=='local':
  rsync_perfopts.append('-W')   # -W copies whole file, doesn't do rsync algo
  # bash backsnap used -W on all fastnets, I'm not so sure about that.
  # It really depends on the speed of the network vs. the speed of the hard
  # disks.

# Setup RSYNC_RSH env --------------------------------------------------------
myenv = os.environ
if not direction=='local':
  # RSYNC_RSH environment variable will be used by rsync
  #   -c arcfour:         weak but fast encryption
  #   -o Compression=no:  rsync already compresses, ssh doesn't need to
  #   -x                  turns off X tunnelling (shouldn't be on anyhow)
  myenv['RSYNC_SSH']="/usr/bin/ionice -c 3 /usr/bin/ssh -c arcfour -o Compression=no -x"
else:
  myenv['RSYNC_SSH']=""

# Get the excludes file into tempdir -----------------------------------------

import subprocess
p = subprocess.Popen(ionice + destcp +
                     ["{0}/.backsnap/excludes".format(dest),
                      tempdir],
                     env=myenv,stderr=subprocess.PIPE)
sts = os.waitpid(p.pid,0)[1]
if (sts!=0):
  print("Error: excludes file out found at {0}/.backsnap/excludes".format(dest))
  myexitcode()
excludesfile=tempdir+"/excludes"

# Verify destination exists --------------------------------------------------

p = subprocess.Popen(destrun + ['/usr/bin/test','-d',destpath],
                     env=myenv,stderr=subprocess.PIPE)
sts = os.waitpid(p.pid,0)[1]
if sts != 0:
  print("Error: Destination {0} not found".format(dest))
  myexitcode()

# Determine the rotation target ----------------------------------------------

if direction=='push':
  p = subprocess.Popen(destrun + ['/bin/cat',
                                  "{0}/.backsnap/count".format(destpath)],
                       env=myenv,stdout=subprocess.PIPE,stderr=subprocess.PIPE)
  output = p.communicate()[0]
  if p.returncode!=0 or len(output)<1:
    count=0
  else:
    if isinstance(output,bytes):
      count = int(output.decode())
else:
  fd = os.open("{0}/.backsnap/count".format(destpath),
               os.O_RDONLY)
  if (fd<1):
    print("Error: trouble reading count")
    myexitcode()
  output = os.read(fd,10)
  count=int(output.decode())
  os.close(fd)

if count == 0:
  # Pre tower strategy, do last level once
  target='LEVEL{0}'.format(options.depth)
else:
  modulus=1
  level=1
  while level<options.depth:
    modulus=modulus*2
    mod=count % modulus
    if mod!=0:
      break
    level+=1
  target='LEVEL{0}'.format(level)

if len(target)<1:
  print("Error: target did not get set (this is a bug)")
  myexitcode()

# Validate src access prior to dest deletion ---------------------------------

# NOTES  We use dest/target instead of dest/target/srcdir because we know
#        it exists, no need to create it, it tests our permissions, and
#        --dry-run doesn't write anything anyhow.
#        It is not recursive, dir copies as dir not going in,
#        --links, --perms, --times, --group, --owner, --devices, --specials
#        are all from -a
cmd = iftesting + ionice
cmd.extend(['/usr/bin/rsync','--links','--perms','--times','--group','--owner',
        '--devices','--specials','--one-file-system','--sparse',
        '--numeric-ids','--dirs','--dry-run'])  # this is ALWAYS dry run
cmd.extend(rsync_perfopts)
cmd.extend([os.path.dirname(srcspath[0]),
            "{0}/{1}".format(dest,target)])
p = subprocess.Popen(cmd, env=myenv)
p.communicate()   # or: sts = os.waitpid(p.pid,0)[1]
if p.returncode not in [0,6,21,23,24,25]:   # Errors acceptible for proceeding
  print("Error: dry-run failed.  Aborting (nothing has been deleted)")
  myexitcode()

# Delete the target directory -----------------------------------------------

cmd = iftesting + destrun + ionice
cmd.extend(['/bin/rm','-rf','--one-file-system','--preserve-root'])
cmd.append("{0}/{1}".format(destpath,target))
p = subprocess.Popen(cmd, env=myenv)
p.communicate()    # or: sts = os.waitpid(p.pid,0)[1]
if p.returncode!=0:
  print("Error: trouble deleting the target directory")
  myexitcode()

# Determine link-targ --------------------------------------------------------

cmd = destrun[:]
cmd.extend(['/bin/ls','-1t',destpath])
p = subprocess.Popen(cmd, env=myenv, stdout=subprocess.PIPE)
output = p.communicate()[0]
if isinstance(output,bytes):
  output = output.decode()
newestlist = output.splitlines()
linktarg=''
for tt in newestlist:
  if tt!=target:
    linktarg="{0}/{1}".format(destpath,tt)
    break

# MAIN LOOP (per srcs) -------------------------------------------------------

for s in srcs:

  if direction=='pull':
    ts = hostmatchprog.match(s)
    shost = ts.groups()[0]
    spath = ts.groups()[1]
  else:
    shost = ''
    spath = s
  sdir=os.path.dirname(spath)

  print()

  # If destdir, clear it -----------------------------------------------------
  cmd = iftesting + destrun + ionice
  cmd.extend(['/bin/rm','-rf','--one-file-system','--preserve-root'])
  cmd.append("{0}/{1}{2}".format(destpath,target,spath))
  p = subprocess.Popen(cmd, env=myenv)
  p.communicate()    # or: sts = os.waitpid(p.pid,0)[1]
  if p.returncode!=0:
    print("Error: trouble deleting the target directory")
    myexitcode()

  # Make destdir -------------------------------------------------------------
  cmd = iftesting + destrun
  cmd.extend(['/bin/mkdir','-p'])
  cmd.append("{0}/{1}{2}".format(destpath,target,spath))
  p = subprocess.Popen(cmd, env=myenv)
  p.communicate()    # or: sts = os.waitpid(p.pid,0)[1]
  if p.returncode!=0:
    print("Error: trouble making the target directory")
    myexitcode()

  # rsync --------------------------------------------------------------------
  # rsync the source directory into target using linktarg as the link
  # destination (that is, if the file is already in linktarg and equal,
  # hardlink instead of copying anew)
  # -a        archive flags
  # -x        don't cross filesystem boundaries
  # -S                    handle sparse files as sparse files
  # --password-file       password for ssh access
  # --exclude-from        skip these directories
  # --numeric-ids         important if UIDs/GIDs are not in sync
  # --link-dest           If exists here, hardlink instead of creating anew
  #
  # These are not used because we start into a fresh directory:
  # --delete              delete first (may not matter if target empty)
  # --delete-excluded     delete newly excluded directories on taget
  print("Snapshoting {0} . . .".format(sdir))
  cmd = iftesting + ionice
  cmd.extend(['/usr/bin/rsync','--archive','--one-file-system','--sparse',
              '--exclude-from={0}'.format(excludesfile),
              '--numeric-ids'])
  cmd.extend(rsync_perfopts)
  if (len(linktarg)>0):
    cmd.append('--link-dest={0}{1}'.format(linktarg,sdir)) # spath wasn't workn
  cmd.append(s)
  cmd.append("{0}/{1}{2}".format(dest,target,sdir))
  p = subprocess.Popen(cmd, env=myenv)
  p.communicate()    # or: sts = os.waitpid(p.pid,0)[1]
  if p.returncode not in (0,6,21,23,24,25):
    print("Error: trouble rsyncing the data")
    myexitcode()

# Mark target as new after we are finished with it --------------------------

cmd = iftesting + destrun
cmd.append('/usr/bin/touch')
cmd.append("{0}/{1}".format(destpath,target))
p = subprocess.Popen(cmd, env=myenv)
p.communicate()    # or: sts = os.waitpid(p.pid,0)[1]
if p.returncode!=0:
  print("Error: trouble updating mtime at target")
  myexitcode()

# Update the count ----------------------------------------------------------
# If a backup fails, it doesn't get this far and the count is not updated,
# then next time it tries over the same slot, which is desirable.
count+=1
if direction=='push':
  cmd = iftesting + destrun
  # The next is all one argument, it's handled on the remote machine:
  cmd.append("/bin/echo {0} > {1}/.backsnap/count".format(count,destpath))
  p = subprocess.Popen(cmd, env=myenv)
  p.communicate()    # or: sts = os.waitpid(p.pid,0)[1]
  if p.returncode!=0:
    print("Error: trouble updating count")
    myexitcode()
else:
  if options.dryrun==0:
    fd = os.open("{0}/.backsnap/count".format(destpath),
                 os.O_WRONLY|os.O_TRUNC)
    if (fd<1):
      print("Error: trouble updating count")
      myexitcode()
    os.write(fd,str(count).encode())
    os.close(fd)

print("Finished.")
myexitcode(exitval=0)
