#!/bin/sh -x
# Backsnap
#
# Derived from discussions on this page:
#   http://www.mikerubel.org/computers/rsync_snapshots/
#
# Configure /etc/backsnap/config
# Then run /sbin/backsnap regularly
#
# Example usage from cron:
#   0 */4 * * *    root   /sbin/backsnap
#
#-------------------------------------------------------------------------
# Avoid accidental use of $PATH
unset PATH

# Define commands
ID=/usr/bin/id;
ECHO=/bin/echo;
MOUNT=/bin/mount;
RM=/bin/rm;
MV=/bin/mv;
CP=/bin/cp;
TOUCH=/bin/touch;
RSYNC=/usr/bin/rsync;
MKDIR=/bin/mkdir;

#-------------------------------------------------------------------------
# Verify we are running as root
THISUID=`$ID -u`
if [ $THISUID -ne 0 ] ; then
  echo "This script will only run as root."
  exit 1
fi

#-------------------------------------------------------------------------
# Include config file
source /etc/backsnap/config

# validate variables defined in config
if [ z$BACKUP_HOST = z ] ; then
  echo "BACKUP_HOST not defined"
  exit 1
fi
if [ x$BACKUP_HOST_PATH = z ] ; then
  echo "BACKUP_HOST_PATH not defined"
  exit 1
fi
if [ 'z$SOURCE_DIRS' = 'z' ] ; then
  echo "SOURCE_DIRS not defined"
  exit 1
fi
for dr in $SOURCE_DIRS; do
  if [ ! -d $dr ] ; then
    echo "Source directory $dr not found"
    exit 1
  fi
done
if [ z$BACKUP_RSYNC_PASSWD_FILE = z ] ; then
  echo "BACKUP_RSYNC_PASSWD_FILE is not set"
  exit 1
fi
if [ ! -f $BACKUP_RSYNC_PASSWD_FILE ] ; then
  echo "$BACKUP_RSYNC_PASSWD_FILE doesn't exist"
  exit 1
fi
if [ ! -r $BACKUP_RSYNC_PASSWD_FILE ] ; then
  echo "$BACKUP_RSYNC_PASSWD_FILE cannot be read"
  exit 1
fi
if [ x$BACKUP_RSYNC_SHARE = x ] ; then
  echo "BACKUP_RSYNC_SHARE is not set"
  exit 1
fi

#-------------------------------------------------------------------------

# Run the rotate script on the remote host
echo "Executing remote rotate script on backup host..."
/usr/bin/ssh ${BACKUP_HOST} ${BACKUP_HOST_PATH}/.rotate

# Do the backups with rsync:
for dr in $SOURCE_DIRS; do
  # rsync the source directory into 0, using 1 as the link destination (that
  # is, if the file is already in 1, hardlink instead of copying anew)
  # -a        archive flags
  # -v        verbose (not really needed if run from cron)
  # -x        don't cross filesystem boundaries
  # --delete  delete first (maybe not even necessary since 0/ is empty)
  echo "Taking snapshot..."
  $RSYNC -avx --password-file=${BACKUP_RSYNC_PASSWD_FILE} --delete \
    --link-dest=../1 ${dr} ${BACKUP_HOST}::${BACKUP_RSYNC_SHARE}${dr}/0/
done

exit 0
