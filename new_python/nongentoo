#!/bin/env python3
# -*- mode: python; -*-
#
# This program prints out all files which are not pristine gentoo portage
# package owned.  That includes all user files, and all package files which
# have been modified (such as config files).
#
# We presume python 3.1 or greater
# We presume utf_8 encoding (portage and python both currently use it as
#   default or possibly even required encoding in some cases)

import sys
if sys.hexversion < 0x3010000:
    print("This program requires python 3.1 or greater")
    sys.exit(1)

__version__="0.2.1"

from optparse import OptionParser
parser = OptionParser(usage="usage: %prog [options]",
                      version="%prog {0}".format(__version__),
                      description="Prints all files and directories not "
                      "installed by gentoo portage, including any files that "
                      "were but have since been modified.  Directories are "
                      "output with a trailing slash and not descended.")
parser.add_option("--excludes",action="store",dest="excludes",
                  default=None,help="File containing list of dirs to skip")
parser.add_option("--md5",action="store_true",dest="md5",
                  default=False,help="Check md5sum rather than mtime (approx 30x slower)")
parser.add_option("--why",action="store_true",dest="why",
                  default=False,help="Prefix filenames with reason")
parser.add_option("--verbose",action="store_true",dest="verbose",
                  default=False,help="Verbose output (on stderr)")
parser.add_option("--root",action="store",dest="root",
                  default="/",help="Analyze from a different root directory "
                  "(this includes where it finds the package database)")
parser.add_option("--topdir",action="store",dest="topdir",
                  default="/",help="Analyze from this top directory "
                  "(this does not affect where it finds the package database)")

(options,args) = parser.parse_args()

excludes=[]
if options.excludes is not None:
    excludes = open(options.excludes).read().splitlines()

# Use integer times
import os
os.stat_float_times(False)

why={'u':'', 'l':'', 's':'', 't':''}
if options.why:
    why={'u':'u ', 'l':'l ', 's':'s ', 't':'t '}

CONTENTS={} #  mapping from filename to a list of results, each being a dict
PKGS={}

import re

# If a filename matches this, it ought to be normalized
normalize_needed = re.compile(r'//|^[^/]|./$|(^|/)\.\.?(/|$)')

def normalize_path(mypath):
    """
    os.path.normpath("//foo") returns "//foo" instead of "/foo"
    We dislike this behavior so we create our own normpath func
    to fix it.
    """
    if sys.hexversion >= 0x3000000 and isinstance(mypath, bytes):
        path_sep = os.path.sep.encode()
    else:
        path_sep = os.path.sep
    if len(mypath)==0:
        return path_sep
    global normalize_needed
    if normalize_needed.search(mypath) is None:
        return mypath
    mypath = os.path.normpath(mypath)
    mypath = mypath.strip()
    mypath = mypath.lstrip(path_sep)
    mypath = path_sep + mypath
    return mypath

# CONTENTS file parsing:
contents_re = re.compile(
    r'^(' + \
    r'(?P<dir>(dev|dir|fif) (.+))|' + \
    r'(?P<obj>(obj) (.+) (\S+) (\d+))|' + \
    r'(?P<sym>(sym) (.+) -> (.+) ((\d+)|(?P<oldsym>(' + \
    r'\(\d+, \d+L, \d+L, \d+, \d+, \d+, \d+L, \d+, (\d+), \d+\)))))' + \
    r')$'
)

def r(path):
    global options
    if not path.startswith(options.root):
        raise AssertionError("path not within {0}".format(options.root))
    # Remove options.root from the front and normalize
    return normalize_path(path[len(options.root):])

# Some of this code comes from /usr/lib/portage/pym/portage/dbapi/vartree.py
# Some of this code comes from Vincent Delft <vincent_delft@yahoo.com>
for root, dirs, files in os.walk(normalize_path(options.root + '/var/db/pkg/')):
    for name in files:
        if name=='CONTENTS':
            contentsfile = os.path.join(root,name)
            cfpn = contentsfile.split('/');
            package=cfpn[-3] + "/" + cfpn[-2]
            mylines=open(contentsfile).readlines()
            null_byte = "\0"
            obj_index = contents_re.groupindex['obj']
            dir_index = contents_re.groupindex['dir']
            sym_index = contents_re.groupindex['sym']
            pos = 0
            for pos, line in enumerate(mylines):
                if null_byte in line:
                    raise ValueError('Null byte found in a CONTENTS file')
                line = line.rstrip("\n")
                m = contents_re.match(line)
                if m is None:
                    raise ValueError('Unparsable line in a CONTENTS file')
                result={'pkg':package} # 'type'
                if m.group(obj_index) is not None:
                    base = obj_index
                    result['type'] = m.group(base+1);
                    result['md5sum'] = m.group(base+3);
                    result['mtime'] = m.group(base+4);
                elif m.group(dir_index) is not None:
                    base = dir_index
                    result['type'] = m.group(base+1);
                elif m.group(sym_index) is not None:
                    base = sym_index
                    result['type'] = m.group(base+1);
                    result['mtime'] = m.group(base+5);
                    result['link'] = m.group(base+3);
                path = normalize_path(m.group(base+2))
                # Store the result
                if result['type'] not in CONTENTS:
                    CONTENTS[path]=[result] # single list
                else: #some files belongs to several packages
                    CONTENTS[path].append(result) # add to list
                PKGS[package]=1

# Starting in Python 3.1, filenames with a bad encoding save the bad bytes
# as unicode surrogate code points at U+DCxx.  If you try to print these,
# you get a UnicdoeEncodeError.  recordAsLatin() reinterprets them as
# latin_1 (iso-8859-1), recoding the surrogates to equivalent latin_1
# points.
def recodeAsLatin(s):
    # Undo the incorrect bytestring decode, saving surrogates
    b = s.encode(sys.getfilesystemencoding(),'surrogateescape')
    # Re-decode, this type trying latin_1
    return b.decode('latin_1')

# This printing function uses the above
def printL(*f,sep='',end='\n',file=sys.stdout):
    newf = []  # Remake *f, translating bad strings into latin
    for fx in f:
        try:
            ignore = fx.encode(sys.getfilesystemencoding(),'strict')
            newf.append(fx)
        except UnicodeError as err:
            newf.append(recodeAsLatin(fx))
    print(*newf,sep=sep,end=end,file=file)

import hashlib
def perform_checksum(filename):
  f = open(filename, 'rb')
  blocksize=32768
  data = f.read(blocksize)
  size = 0
  sum = hashlib.md5()
  while data:
    sum.update(data)
    size = size + len(data)
    data = f.read(blocksize)
  return (sum.hexdigest().lower(),size)

def parse_dir(dirname, dirs, files):
    global options
    if (options.verbose):
        printL("Combing {0}...".format(r(dirname)), file=sys.stderr)
    for dir in dirs:
        curdir=os.path.join(dirname,dir)
        rcurdir=r(curdir)
        if (rcurdir not in excludes) and (rcurdir not in CONTENTS):
            printL(why['u'],rcurdir,'/')   # User directory
    for file in files:
        curfile=os.path.join(dirname,file)
        rcurfile=r(curfile)
        if rcurfile in CONTENTS:
            if os.path.islink(curfile):
               if os.readlink(curfile) not in [res['link'] for res in CONTENTS[rcurfile]]:
                   printL(why['l'],rcurfile)   # changed link
            elif os.path.isfile(curfile):
               if options.md5:
                   md5stored = [res['md5sum'] for res in CONTENTS[rcurfile]]
                   md5real = perform_checksum(curfile)[0]
                   if (md5real not in md5stored):
                       printL(why['s'],rcurfile)   # changed sum
               else:
                   mtimestored=[res['mtime'] for res in CONTENTS[rcurfile]]
                   mtimereal=str(os.path.getmtime(curfile))
                   if mtimereal not in mtimestored:
                       printL(why['t'],rcurfile)   # changed mtime
        else:
            printL(why['u'],rcurfile)   # User file (not in contents)

start=normalize_path(options.root + options.topdir)
for thisdir, dirs, files in os.walk(start):
    rthisdir=r(thisdir)
    if rthisdir in excludes:
        del dirs[:] # Wipe out directories, it won't go any deeper
    elif (rthisdir not in CONTENTS) and (rthisdir != '/'): # Pure user
        del dirs[:] # Wipe out directories, it won't go any deeper
    else:
        parse_dir(thisdir,dirs,files)
    sys.stdout.flush()
